#lang racket/base

(require racket/match
         "ast.rkt")

(provide (all-defined-out))

(define pair (Struct_t 'pair (list (cons 'head 'num)
                                   (cons 'tail (Ptr_t 'pair)))))

(define (sizeof t)
  (match t
    ['num      4]
    [(Ptr_t _) 4]
    ['char     1]
    ['bool     1]
    [(Struct_t _ fields)
     (foldl (lambda (acc f) (+ acc (sizeof (cdr f))))
            0 fields)]))

(define (member-offset s m)
  (define (mo-aux fields offset)
    (match fields
      [(? null? _)
       (error "FAIL")]
      [(? (lambda (f) (eq? (caar f) m)) _)
       offset]
      [else
       (mo-aux (cdr fields) (+ offset (sizeof (cdar fields))))]))
  (mo-aux (Struct_t-fields s) 0))

(define *baselib-types*
  (make-immutable-hash
   (list (cons '%add (Fun_t 'num  (list 'num 'num)))
         (cons '%pp  (Fun_t 'num  (list 'num)))
         (cons '%addi (Fun_t 'num  (list 'num 'num)))
         (cons '%sub (Fun_t 'num  (list 'num 'num)))
         (cons '%mul (Fun_t 'num  (list 'num 'num)))
         (cons '%div (Fun_t 'num  (list 'num 'num)))
         (cons '%mod (Fun_t 'num  (list 'num 'num)))
         (cons '%sll (Fun_t 'num  (list 'num 'num)))
         (cons '%srl (Fun_t 'num  (list 'num 'num)))
         (cons '%seq (Fun_t 'bool (list 'num 'num))) ;; -> 'num pour tester
         (cons '%sne (Fun_t 'bool (list 'num 'num)))
         (cons '%slt (Fun_t 'bool (list 'num 'num)))
         (cons '%sgt (Fun_t 'bool (list 'num 'num)))
         (cons '%sle (Fun_t 'bool (list 'num 'num)))
         (cons '%sge (Fun_t 'bool (list 'num 'num))) ;;
         (cons '%and (Fun_t 'bool (list 'num 'num)))
         (cons '%or  (Fun_t 'bool (list 'num 'num)))
         (cons '%xor (Fun_t 'num  (list 'num 'num)))
         (cons '%not (Fun_t 'bool (list 'bool)))
         (cons 'print_num  (Fun_t 'void (list 'num)))
         (cons 'print_str  (Fun_t 'void (list 'str)))
         (cons 'print_bool (Fun_t 'void (list 'bool)))
         (cons 'print_nl   (Fun_t 'void (list)))
         (cons 'nil        (Fun_t (Ptr_t '%) (list)))
         (cons 'pair       (Fun_t (Ptr_t 'pair) (list 'num (Ptr_t 'pair))))
         (cons 'head       (Fun_t 'num (list (Ptr_t 'pair))))
         (cons 'tail       (Fun_t (Ptr_t 'pair) (list (Ptr_t 'pair)))))))

(define *baselib-builtins*
  (make-immutable-hash
   (list (cons '%add (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Add 'v0 't0 't1)))
         (cons '%pp (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Addi 'v0 'v0 1)))
         (cons '%addi (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Addi 'v0 'v0 1)))
         (cons '%sub (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Sub 'v0 't0 't1)))
         (cons '%mul (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Mul 'v0 't0 't1)))
         (cons '%div (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Div 'v0 't0 't1)))
         (cons '%mod (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Div 'v0 't0 't1)
                           (Mfhi 'v0)))
         (cons '%sll (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Sll 'v0 't0 't1)))
         (cons '%srl (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Srl 'v0 't0 't1)))
         (cons '%seq (list (Lw 't0 (Mem 'sp 4)) ;;resultat dans registre $t5
                           (Lw 't1 (Mem 'sp 0))
                           (Seq 't5 't0 't1)))  ;;$v0 pour tester
         (cons '%sne (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Sne 't5 't0 't1)))
         (cons '%slt (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Slt 't5 't0 't1)))
         (cons '%sgt (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Sgt 't5 't0 't1)))
         (cons '%sle (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Sle 't5 't0 't1)))
         (cons '%sge (list (Lw 't0 (Mem 'sp 4)) ;;
                           (Lw 't1 (Mem 'sp 0))
                           (Sge 't5 't0 't1)))
         (cons '%and (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (And 't5 't0 't1)))
         (cons '%or (list  (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Or 't5 't0 't1)))
         (cons '%xor (list (Lw 't0 (Mem 'sp 4))
                           (Lw 't1 (Mem 'sp 0))
                           (Xor 't5 't0 't1)))
         (cons '%not (list (Not 't5 't5)))
         (cons 'print_num (list (Lw 'a0 (Mem 'sp 0))
                                (Li 'v0 PRINT_INT)
                                (Syscall)))
         (cons 'print_str (list (Lw 'a0 (Mem 'sp 0))
                                (Li 'v0 PRINT_STRING)
                                (Syscall)))
         (cons 'print_bool (list (Lw 'a0 (Mem 'sp 0))
                                 (Li 'v0 PRINT_INT)
                                 (Syscall)))
         (cons 'print_nl (list (La 'a0 (Lbl 'nl))
                               (Li 'v0 PRINT_STRING)
                               (Syscall)))
         (cons 'nil (list (Li 'v0 0)))
         (cons 'pair (list (Jal (Lbl 'pair))))
         (cons 'head (list (Jal (Lbl 'head))))
         (cons 'tail (list (Jal (Lbl 'tail)))))))

(define *fake-user-code*
  (list (Label 'pair)
        (Addi 'sp 'sp -12)
        (Sw 'ra (Mem 'sp 0))
        (Sw 'fp (Mem 'sp 4))
        (Addi 'fp 'sp 12)
        (Li 'a0 8)
        (Li 'v0 SBRK)
        (Syscall)
        (Sw 'v0 (Mem 'sp 8))
        (Lw 'v0 (Mem 'fp 4))
        (Move 't0 'v0)
        (Lw 'v0 (Mem 'sp 8))
        (Sw 't0 (Mem 'v0 0))
        (Lw 'v0 (Mem 'fp 0))
        (Move 't0 'v0)
        (Lw 'v0 (Mem 'sp 8))
        (Sw 't0 (Mem 'v0 4))
        (Lw 'v0 (Mem 'sp 8))
        (Lw 'ra (Mem 'sp 0))
        (Lw 'fp (Mem 'sp 4))
        (Addi 'sp 'sp 12)
        (Jr 'ra)
        (Label 'head)
        (Addi 'sp 'sp -8)
        (Sw 'ra (Mem 'sp 0))
        (Sw 'fp (Mem 'sp 4))
        (Addi 'fp 'sp 8)
        (Lw 'v0 (Mem 'fp 0))
        (Lw 'v0 (Mem 'v0 0))
        (Lw 'ra (Mem 'sp 0))
        (Lw 'fp (Mem 'sp 4))
        (Addi 'sp 'sp 8)
        (Jr 'ra)
        (Label 'tail)
        (Addi 'sp 'sp -8)
        (Sw 'ra (Mem 'sp 0))
        (Sw 'fp (Mem 'sp 4))
        (Addi 'fp 'sp 8)
        (Lw 'v0 (Mem 'fp 0))
        (Lw 'v0 (Mem 'v0 4))
        (Lw 'ra (Mem 'sp 0))
        (Lw 'fp (Mem 'sp 4))
        (Addi 'sp 'sp 8)
        (Jr 'ra)))
